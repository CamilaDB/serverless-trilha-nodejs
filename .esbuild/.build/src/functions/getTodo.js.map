{
  "version": 3,
  "sources": ["../../../../src/functions/getTodo.ts", "../../../../src/utils/dynamodbTodo.ts"],
  "sourcesContent": ["import { APIGatewayProxyHandler } from \"aws-lambda\";\r\nimport { document } from \"../utils/dynamodbTodo\"\r\n\r\nexport const handler: APIGatewayProxyHandler = async (event) => {\r\n  const { user_id } = event.pathParameters;\r\n  let res = [];\r\n\r\n  const params = {\r\n    TableName: \"user-todo\",\r\n    FilterExpression: \"user_id = :user_id\",\r\n    ExpressionAttributeValues: {\r\n      \":user_id\": user_id\r\n    }\r\n  }\r\n\r\n  await document.scan(params, function (err, data) {\r\n    if (err) {\r\n      console.log(\"Error\", err);\r\n    } else {\r\n      res = data.Items;\r\n    }\r\n  }).promise();\r\n\r\n  return {\r\n    statusCode: 200,\r\n    body: JSON.stringify(res)\r\n  }\r\n}", "import { DynamoDB } from \"aws-sdk\"\r\n\r\nconst options = {\r\n  region: \"localhost\",\r\n  endpoint: \"http://localhost:8000\",\r\n  accessKeyId: \"x\",\r\n  secretAccessKey: \"x\"  \r\n}\r\n\r\nconst isOffline = () => {\r\n  return process.env.IS_OFFLINE;\r\n}\r\n\r\nexport const document = isOffline() ? new DynamoDB.DocumentClient(options) : new DynamoDB.DocumentClient();"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;;;ACAA,qBAAyB;AAEzB,IAAM,UAAU;AAAA,EACd,QAAQ;AAAA,EACR,UAAU;AAAA,EACV,aAAa;AAAA,EACb,iBAAiB;AAAA;AAGnB,IAAM,YAAY,MAAM;AACtB,SAAO,QAAQ,IAAI;AAAA;AAGd,IAAM,WAAW,cAAc,IAAI,wBAAS,eAAe,WAAW,IAAI,wBAAS;;;ADVnF,IAAM,UAAkC,OAAO,UAAU;AAC9D,QAAM,EAAE,YAAY,MAAM;AAC1B,MAAI,MAAM;AAEV,QAAM,SAAS;AAAA,IACb,WAAW;AAAA,IACX,kBAAkB;AAAA,IAClB,2BAA2B;AAAA,MACzB,YAAY;AAAA;AAAA;AAIhB,QAAM,SAAS,KAAK,QAAQ,SAAU,KAAK,MAAM;AAC/C,QAAI,KAAK;AACP,cAAQ,IAAI,SAAS;AAAA,WAChB;AACL,YAAM,KAAK;AAAA;AAAA,KAEZ;AAEH,SAAO;AAAA,IACL,YAAY;AAAA,IACZ,MAAM,KAAK,UAAU;AAAA;AAAA;",
  "names": []
}
